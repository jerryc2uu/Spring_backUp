# day02

	<<web.xml>>
	
	[등록방법]
		1. 서블릿 등록
			<servlet>
				<servlet-name>appServlet</servlet-name>
				==> 서블릿에 부여하는 이름 (개발자 마음)
				<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
				==> 사용할 클래스 지정
					jsp 프로젝트에서는 직접 만들어서 등록
					스프링에서는 미리 만들어진 서블릿 사용
				<init-param>
					<param-name>contextConfigLocation</param-name>
					<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
					==> 지정한 서블릿 클래스의 환경 설정 담당할 설정 파일(xml 파일) 지정
						파일 이름은 마음대로, 경로는 지켜야함
				</init-param>
				<load-on-startup>1</load-on-startup>
				=> 서블릿이 행동할 우선순위 지정
			</servlet>
			
	[참고]
		하나의 스프링에 서블릿은 여러 개 제작 가능
		각 서블릿은 다른 요청을 처리해야 한다
		url : 키값, 클래스 : 데이터
		
		서블릿 이름과 환경 설정 파일의 이름을 다르게 해야 한다.
			(base-package 겹치면 servlet 따로 만들어야 함)
			
		서블릿 등록과 서블릿 매핑은 반드시 한 쌍으로 만들어야 한다.
		
		서블릿 매핑은 jsp 프로젝트와 동일
		
=======================================
	<<bean-context.xml>>
	
	<의존주입(Dependency Injection)>
	: 의존성 있는 객체 주입해줌(의존주입)
	 
		어떤 클래스 사용하는 데 있어서 스스로 new 시키지 않고 다른 곳에서 new 시킨 것을
		받아서 사용하는 방법
		
		[예]
			jsp프로젝트
			==> 회원 가입 처리의 경우,
				
				member.JoinProc {
					private BlpDBCP db = new BlpDBCP();
				}
				
				dao.MemberDao {
					private BlpDBCP db;
					=> 이 클래스는 BlpDBCP 객체에 의존적이다.
						이 객체가 없으면 이 클래스 내부의 어떤 작업도 불가능
						따라서 이 클래스는 new 될 때 반드시 BlpDBCP가 준비된 상태여야 한다.
						
						JSP에서는 이 객체를 생성자에서 new 시켜 준비했지만
						스프링에서는 이미 스프링이 new 시켜서 만들어놨으므로
						이를 변수에 대입만 해주면 된다.
						이것이 "의존주입"이다. 				
						
									
					public MemberDao() {
						db = new BlpDBCP();
					}

					public MemberDao(BlpDBCP db) {
						this.db = db;
					}
					
					public int addMember() {}
				}
				
			스프링에서는 Bean 처리(xml 파일에서 직접 필요한 클래스 new 시키는 방법) 가능
			해당 xml 파일에서 bean 처리 하려면 반드시 
			
				"http://www.springframework.org/schema/beans"
				
			스키마를 등록해야 한다..
			
			[예]
				<bean id="page" class="com.githrd.www.util.PageUtil" />
				
				==> PageUtil page = new PageUitl(); 과 같은 결과
			
			[참고]
				bean 처리 시 기본 생성자가 실행되는데 이 때 특정 변수의 값을 셋팅할 수 있다.
				
				<bean id="page" class="com.githrd.www.util.PageUtil">
					<property name="nowPage" value="1" />
					<property name="pageRow" value="10" />
					<property name="pageGroup" value="10" />
				</bean>
				<bean id="page1" class="com.githrd.www.util.PageUtil">
					<property name="nowPage" value="1" />
					<property name="pageRow" value="3" />
					<property name="pageGroup" value="3" />
				</bean>
				
	**	[중요]
			스프링에서 의존 주입 하려면 먼저 Bean 처리 돼 있어야 한다.
			
=====================================

	<자동의존주입>
	bean 처리된 클래스를 필요로 하는 곳에서 어노테이션 이용해 사용하도록 하는 것
	
	@Autowired
	: 모든 bean 처리된 클래스를 자동으로 찾아서 주입해주는 어노테이션
	
	@Qualifier
	: 동일한 클래스가 여러 번 bean 처리된 경우 특정 bean을 선택하도록 하는 어노테ㅣㅇ션

		[참고]
			bean 처리 시 하나의 클래스 여러 번 가능
			이떄 반드시 bean의 아이디값을 달라야 한다.
			
	@Resource
	: 자동 주입할 클래스를 지정해서 주입하도록 하는 어노테이션
	
	[참고]
		@Autowired => 스프링 전용
		@Inject => 자바 어플리케이션(스프링 포함)에서 사용

=================================================

	@Autowired
		
		[참고]
			사용 지점?
			
			1. 변수 생성
			
			2. 생성자 함수
				
				public class Test {
					@Autowired
					public Test(MemberDao mDao) {
					
					}
				}
			
				<bean id="page" class="com.githrd.www.util.PageUtil">
					<property name="nowPage" value="1" />
					<property name="pageRow" value="10" />
					<property name="pageGroup" value="10" />
				</bean>
				<bean id="page1" class="com.githrd.www.util.PageUtil">
					<property name="nowPage" value="1" />
					<property name="pageRow" value="3" />
					<property name="pageGroup" value="3" />
					<qualifier value="gboard" />
				</bean>
				
				@Controller
				@RequestMapping("/gboard")
				
				public class GuestBoard {
					@Qualifier("gboard")
					PageUtil page;
				}
				
				[참고]
					@Autowired 사용 시
					자동으로 bean 찾아서 자동 주입 해주게 된다.
					반대로 말하자면 해당 bean을 찾지 못하면 에러 발생
					bean 처리 미리 하고 @Autowired 써야 함
					
					이런 경우 대비해서 만약 bean을 찾지 못하더라도
					에러 없이 진행 시킬 수 있는 방법
					
					[형식]\
						@Autowired(required=false)
				
			3. set 함수
		
		[주의]
			@Autowired는 선언한 바로 다음줄에 한해서만 적용된다.
			
			[예]
				<bean id="bDao" class="com.githrd.www.dao.BoardDao" />
				<bean id="mDao" class="com.githrd.www.dao.MemberDao" />
				
				컨트롤러에서 위 두 개의 빈을 의존주입하는 경우
				
				@Autowired
				MemberDao mDao; ==> (o)
				BoardDao bDao; ==> (x)					
				
				
				@Autowired
				MemberDao mDao; ==> (o)
				@Autowired
				BoardDao bDao; ==> (o)					

=============================================

	@Resource에 의한 자동 의존 주입
	: @Autowired 보다는 강력하지 않고 
		Bean 처리된 것 중에서 특정한 bean을 선택해서 자동 주입하는 기능
	
	[형식]
		@Resource(name="bean의 아이디값")
		변수 선언
		
	[예]
		<bean id="page" class="com.githrd.www.util.PageUtil">
			<property name="nowPage" value="1" />
			<property name="pageRow" value="10" />
			<property name="pageGroup" value="10" />
		</bean>
		<bean id="page1" class="com.githrd.www.util.PageUtil">
			<property name="nowPage" value="1" />
			<property name="pageRow" value="3" />
			<property name="pageGroup" value="3" />
			<qualifier value="gboard" />
		</bean>
		
		@Controller
		@RequestMapping("/gboard")
		
		public class GuestBoard {
			@Resource(name="page1")
			PageUtil page;
		}
	
	[참고]
		@Resource 에서 원하는 bean을 찾는 순서
			
			1. name에 지정한 값과 동일한 id를 가진 Bean을 찾아서 자동의존주입
			2. id값과 동일한 bean이 없는 경우
				클래스 이름을 이용해서 bean을 찾아서 자동 의존 주입한다.
			3. 만약 같은 이름이 중복되면 에러 발생
				(@Qualifier 이용해서 구분처리 가능, 지양)
	
	[참고]
		명시적, 묵시적 의존 주입 동시 존재의 경우
		명시적이 우선적용
		
		xml파일
		
			<bean id="mDao" class="com.githrd.www.dao.MemberDao" />
			
			<bean id="print" class="com.githrd.www.util.GitPrint" />		
			<bean id="print2" class="com.githrd.www.util.GitPrint" />
			
			<bean id="gitInfo" class="com.githrd.www.util.GitInfo">
				<property name="print" ref="print2" />
			</bean>		
			
			public class GitInfo {
				@Autowired
				private MemberDao mDao;
				
				@Autowired
				private GitPrint print; ==> id가 print2인 bean이 주입
				==> 명시적으로 print2를 이용해 의존주입 시켰기 때문...
			}	
			
====================================


	<<pom.xml>>
	
	스프링에서 데이터베이스 연동
	
		1. 커넥션 풀과 오라클에 필요한 라이브러리(ojdbc6.jar) 불러오기
		
			[참고]
				
				Maven 방식
					pom.xml에서 필요한 라이브러리를 등록하면 자동 다운, 등록
				
				# 스프링에서 jdbc 사용하기 위한 라이브러리
				<dependency>
				    <groupId>org.springframework</groupId>
				    <artifactId>spring-jdbc</artifactId>
				    <version>${org.springframework-version}</version>
				</dependency>

				# 커넥션 풀 관리하는 라이브러리
				<dependency>
				    <groupId>commons-dbcp</groupId>
				    ==> 라이브러리 배포 그룹
				    <artifactId>commons-dbcp</artifactId>
				    ==> 라이브러리 이름(프로젝트 이름)
				    <version>1.4</version>
				    ==> 버전
				</dependency>
				
				ojdbc6를 설치해야 하는데 
				메이븐 방식으로 pom.xml에 등록해서 처리해도 되고
				
				만약 메이븐 저장소에 없는 경우
				외부 저장소에서 다운로드 한 뒤
				
				<repositories>
					<repository>					
						<id>저장소아이디</id>
						<url>외부저장소주소</url>
					</repository>					
				</repositories>
				
				위 태그를 <dependencies> 태그 위쪽에 먼저 등록해준다..
				
				# 직접 다운 받은 라이브러리 사용 방법
				
					1. WEB-INF/lib 폴더에 다운 받은 라이브러리 저장
					2. pom.xml 파일에 내부라이브러리를 이용하는 <dependency> 태그 작성
						
						<dependency>
							<groupId>com.oracle.database.jdbc</groupId>
							<artifactId>ojdbc6</artifactId>
							<version>11.2.0.4</version>
							<scope>system</scope>
							<systemPath>${basedir}/src/main/webapp/WEB-INF/lib/ojdbc6.jar</systemPath>
						</dependency>

===================================================
	
	
	<<root-context>>
	
	커넥션 풀 설정
	
	1. 방법1
		
		1) <resource> 태그 이용, 커넥션 풀 설치 후 처리
			
			<Resource
				name="jdbc/TestDB"
				auth="Container"
				type="javax.sql.DataSource"
				maxTotal="8"
				maxIdle="2"
				maxWaitMillis="10000"
				username="jennie"
				password="12345"
				driverClassName="oracle.jdbc.driver.OracleDriver"
				url="jdbc:oracle:thin:@localhost:1521:xe" 
			/>
			
		2) bean 처리
			
			<bean id="dataSource" class="org.springframework.jndi.JndiPbjectFactoryBean">
				<property name="jndiName" value="java:/comp/env/jdbc/TestDB" />
				<property name="resourceRef" value="true" />
			</bean>
			
			==> 커넥션 풀을 따로 설치한 후
				커넥션 풀을 사용하기 위한 DataSource 객체를 DI 처리
	
	2. 직접 Bean 처리하는 방법
	
		DataSource를 DI 객체로 생성하면서 그 안에서 커넥션 풀을 확보하는 방법
		
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
			<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
			<property name="username" value="jennie" />
			<property name="password" value="12345" />
			<property name="maxActive" value="8" />
		</bean>
		
======================================
	
	myBatis 연동
		: 데이터베이스 처리 도와주는 프레임 워크의 일종
		  커넥션 풀에서 커넥션 얻어오는 방법이나
		  질의명령 생성을 편하게 해주고
		  질의명령 실행해서 Model 작성하는 방법 등
		  개발자의 손을 거치지 않고 실행해주는 기능을 갖고 있다...		
	
	A. 세팅
		0. myBatis 처리 위한 라이브러리 등록 (pom.xml)
		1. myBatis 환경 설정
			==> 여기선 환경설정 파일의 경로와 이름만 지정하고
			    실제 환경설정은 해당 xml 파일을 이용해서 한다.	
				xml 파일의 위치는 어디에 있어도 상관 없다.
				
				우리의 경우
				com.githrd.www.mybatis.mybatis-config.xml
				파일에서 설정 해줬다.
		2. myBatis에서 제공하는 커넥션 풀의 커넥션을 DI기법으로
		   가지고 오도록 처리해준다.
	
	B. 데이터베이스 처리 위해서 기본적으로 질의명령이 필요
		myBatis에선 질의명령만 모아서 관리하는 방식을 채택
		
		이때 myBatis에서 질의명령만 모아둔 방식은 xml 파일을 이용하는 방식
		
		***
		이 xml 파일은 이름과 경로는 사용자가 정하는 것이고
		다만 myBatis 환경 설정 파일에 등록만 해주면 된다. <mappers> 태그 이용
		=> 이 과정을 "Mapping" 시킨다고 표현함
		
		[참고] MemberSQL.xml 참고...
			어떤 문서가 xml 파일이 되기 위한 조건
				1. 필수 헤더 선언을 한다.
					<?xml version="1.0" encoding="UTF-8" ?>
				2. 필요에 따라 스키마(문서의 구조) 혹은 DTD 선언을 한다.
				    <!DOCTYPE mapper 
				    	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
				    		   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
				3. 필수적으로 반드시 한 개의 ROOT 태그가 존재해야 한다.
					<mapper namespace="mSQL">
					</mapper>
	
	C. Dao 제작
		: 일반클래스로 제작하면 된다.
		  질의명령 실행 목적으로 하므로 커넥션(세션)이 필요.
		  따라서 환경 설정에서 등록해놓은 세션을 DI 기법으로 처리해놓음 된다.
		  
	[참고]
		질의명령 태그 작성 방법
			resultType
			==> 질의명령의 실행 결과 발생하는 인라인 뷰에서
			    한 행을 어떤 타입으로 담을 것인지 기술
				여러 행 발생하더라도 list로 만드는 작업은 mybatis가 해결해줌
				개발자는 한 행에 해당하는 타입을 어떻게 담을지만 결정하면 된다.
				
				우리의 경우 여러 타입의 데이터는 VO로 처리
				
			parameterType
			==> 질의명령을 보낼 때 바뀌는 데이터 부분을 채워야 할텐데
			    이 때 전달받아 채울 데이터의 타입 기술
			    문자열 : String, string
			    정수 : int
			    ...
			    
	***
	[중요]
		작성된 SQL파일(XML)은 반드시 매핑되어야 사용가능
		이 작업은 myBatis 환경 설정 파일에서 <mappers>로 처리하면 된다.
		작성된 dao 클래스는 컨트롤러 쪽에서 사용 예정
		당연히 DI 기법으로 DAO 클래스 사용할 것이므로
		의존 주입 되기 전에 먼저 <bean> 처리가 돼야 한다.
		==> servlet-context.xml에서 <bean> 처리만 전담해서 처리하는 
			bean-context 불러와서 처리해주고 있다.           