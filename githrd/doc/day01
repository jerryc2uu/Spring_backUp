# day01
	
	*** 함수단위
	***	Bean 처리 가능(미리 new 시킴)
		java => 자바 코드들
		wepapp => jsp 관련 코드들
		
	<Spring>
	: MVC 패턴을 기반으로 하는 웹 프로그램 개발 위한 프레임 워크
	  보다 다양한 기능을 제공 (JSP는 반복적인 코딩이 많다.)
	  
	  지금까지 직접 만들어 사용했던 디스패치 서블릿 등 모든 작업을
	  미리 만들어놓고 이용할 수 있도록 하는 개발 툴
	  
	  전자정부 3.0에서 지원하는 프레임워크
	  
	  
	  [특징]
	  	1. 요청 처리가 컨트롤러 단위가 아닌 함수 단위로 이루어짐
	  		
	  		JSP 프로젝트는 하나의 요청이 생기면 하나의 컨트롤러를 제작해 요청 처리
	  		스프링에서는 컨트롤러 클래스는 하나만 제작하고 그 내부의 메소드를 여러 개 만들어서 요청 처리
	  		
	  		A 요청 => A 함수
	  		B 요청 => B 함수
	  		...
	  		
	  		하나의 클래스 안에 여러 개의 함수를 만든다는 것은
	  		각각의 함수의 공통 기능을 따로 함수로 만들어서
	  		공통적으로 이용할 수 있다는 의미
	  		
	  *	2. Bean 처리 가능 (WEB-INF => spring => root-context.xml에서 처리)
	  		
	  		사용할 클래스를 한 곳에 모아서 미리 new 시키기 가능
	  		소스 관리가 매우 수월
	  		
	  		=> Single Tone(한 가지 패턴 계속 유지) 때문.. ([예] session)
	  	
	  * 3. DI 기법(의존주입) 이용 가능
	  		
	  		DI 기법?
	  		  *	1) 느슨한 주입
	  		  		
	  		  		빈 처리해서 new 시킨 클래스를 자동으로 사용하는 기법
	  			
	  			2) 자동의존주입
	  	
	  *	4. AOP 기법 이용 가능
	  		
	  		AOP 기법?
	  			전처리 클래스
	  			특정 작업 실행되는 순간 필요한 작업 우선 처리하는 기법
	  			
	  			예]
	  				회원가입, 로그인, 로그아웃 => 세션 검사
	  				트랜잭션(작업단위) 처리 : 두 가지 작업을 하나의 단위로 만들어서 커밋하는 기능
	  				
	 
	 [참고]
	 	스프링 프로젝트 만드는 방법
	 	
	 		1. ADT 방식
	 			필요한 라이브러리를 하나씩 직접 다운받아 직접 적용시켜서 작업하는 방식
	 			
	 		2. Maven 방식
	 			메이븐 서버에 저장된 라이브러리를 자동으로 다운받아서 적용하는 방식 
	 			자동적으로 필요한 라이브러리를 설치한다.
	 			필요한 라이브러리는 pom.xml에 등록하면 Maven 서버에서 자동으로 서버 저장소에 접속해서
	 			해당 라이브러리를 받아 설치하게 된다.
	 			
	 			[단점]
	 				프로젝트 내에 필요한 라이브러리가 없으면 메이븐 저장소에 접속해 라이브러리 다운받은 후
	 				프로젝트에 적용시켜준다.
	 				
	 				만일 잘못된 라이브러리가 다운되더라도 메이븐 서버는 해당 라이브러리가 존재하면
	 				잘못된 파일이라도 그것을 적용한다. 	 					 
	  				
	  				(이 경우 이클립스 종료 후
	  					c드라이브 - 사용자 - 사용자 이름 - .m2 - repository 폴더 지운 후 다시 이클립스 실행) 
		
	[폴더 구조]
		일반적인 프로젝트와 폴더의 사용 방법은 동일
		
		Java Resource는 자바 소스코드를 작성하는 폴더
		src/main/webapp 는 JSP, JS, CSS, HTML 등의 웹 문서를 작성하는 곳
		
		* 뷰는 반드시 컨트롤러에서 포워드해서 보여줘야 하기에
		  src/main/webapp/WEB-INF/views/ 에 jsp 파일을 생성해야 한다.
		  => WEB-INF는 웹 브라우저에서 접근 불가한 서버만 접근할 수 있는 폴더니까

	[참고]
		설정 파일 읽는 순서	
		
			톰캣의 web.xml 
		=>	프로젝트의 web.xml 
		=>	root-context.xml 					==> mybatis-config.xml ==> VO & sql xml
			appServlet/servlet-context.xml

	[참고]
		web.xml에서	
			<context-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>/WEB-INF/spring/root-context.xml</param-value>
			</context-param>
			==> 환경설정 시 내용이 복잡해질 것을 대비해 보조 환경 설정 파일 지정하는 부분
				
				데이터베이스 설정은 root-context.xml에서 전담해서 처리한다.


==============================

	<컨트롤러 제작>
		스프링은 요청에 따라 컨트롤러가 아닌 메소드를 제작
		
		따라서 컨트롤러의 갯수는 노상관
		다만 환경설정 파일에 등록된 위치를 기본 베이스로 해서 그 하위에 만들어주면 됨
		(servlet-context.xml의 <context:component-scan base-package="com.githrd.www" />)			
		
		따라서 함수를 제작할 때 이 함수가 어떤 요청이 왔을 때 실행되는 함수인지 지정해줘야 하는데
		이 때 사용하는 명령이 @RequestMapping이다.
		
		[명령]
			@RequestMapping
				
		[형식]
			1. 하나의 요청 처리하는 방법
				
				@RequestMapping("요청내용")
				
				[예]
					@RequestMapping("/main.blp")
					==> http://localhost/www/main.blp 요청을 처리
					
					@RequestMapping("/member/login.blp")
					==> http://localhost/www/member/login.blp 요청 처리
			
			2. 여러 개의 요청을 한 개의 메소드로 처리하는 방법
				
				@RequestMapping({"요청내용1", "요청내용2", ...})
				
				[예]
					@RequestMapping({"/", "/main.blp"})
					==> http://localhost/www/
						http://localhost/www/main.blp 두 가지 요청 모두 처리
			
			3. 요청 방식(GET/POST)에 따라 달라지는 방법
				
				@RequestMapping(path="요청내용", method=RequestMethod.POST or GET)
				==> POST(or GET) 방식 요청만 처리하는 함수
				
			4. 파라미터(뷰에서 서버로 전달되는 데이터) 존재 여부에 따라 달라지는 방법
				==> 특정 파라미터가 존재하는 경우에만 처리하는 방법
				
				@RequestMapping(path="요청내용", params="키값")
				@RequestMapping(path="요청내용", params={"키값", "키값2", ...})
				
				[예]
					@RequestMapping(path="/member/loginProc.blp", params={"id", "pw"})
					==> id, pw라는 파라미터가 존재할 경우 요청을 처리하는 함수
				
				[참고]
					키값 앞에 !를 붙이면 반대의 개념이 된다. (존재하지 않을 때만 요청 처리)
			
			5. 파라미터의 값이 특정 값인 경우만 처리하는 방법
				
				@RequestMapping(path="요청내용", params="키값=데이터")
				
				
		[참고]
			와일드 카드 이용한 요청 처리
			: 여러 요청을 하나의 함수가 실행하도록 함
			
			1. 문자 이용 처리
			
				[예]
					게시판의 경우 요청들의 이름이 
						boardList.blp
						boardWrite.blp
						boardEdit.blp 로 요청
						
					이것을 하나의 함수로 처리하려면
						
						@RequestMapping("/board/board*")
						==> board 라는 단어로 시작하는 요청은 뒤에 어떤 단어가 오더라도 이 함수로 처리
		
		[참고]
			스프링은 요청 처리 단위가 컨트롤러 아니고 함수
			하지만 프로그램 제작하다보면 특정 컨트롤러 안에 있는 함수는 공통된 기능을 갖게 된다.
			
			[예]
				회원 관련 요청 처리할 컨트롤러에는
				
					@RequestMapping("/member/login.blp")

					@RequestMapping("/member/logout.blp")

					@RequestMapping("/member/join.blp")

					@RequestMapping("/member/joinProc.blp")
				
				이렇게 요청 처리하는 함수가 만들어질 것이고
				이 때마다 요청 내용의 시작 부분에는 대부분 "/member"가 붙게 된다.
				
				이렇게 앞에 반복적으로 요청내용이 기술되는 경우
				컨트롤러에 반복되는 요청 내용 중 일부를 매핑을 하고
				이후 부분을 각 함수에서 요청 매핑을 해줄 수 있다.
				
				@RequestMapping("/member")
				public class Member {
					
					@RequestMapping("/login.blp") ==> /member/login.blp로 오는 요청 처리
					...

					@RequestMapping("/loginProc.blp") ==> /member/loginProc.blp로 오는 요청 처리
					...

					@RequestMapping("/join.blp")
					...

					@RequestMapping("/joinProc.blp")
					...
				}
				
				이 때 요청 처리는 
					클래스에 매핑된 요청 내용 + 함수에 매핑된 요청 내용
				을 결합해 처리한다.

==========================================

	<뷰 처리>
	
		MVC 패턴(Model2)에서는 컨트롤러의 역할이 끝나면 뷰 호출
		컨트롤러는 자신이 만든 데이터(Model)를 이용해서 화면 구성할 뷰를 선택
		
		<스프링이 뷰 선택하는 방법>
			
			1. 반환값을 void로 해서 뷰 지정하는 방법
			
				스프링은 자동적으로 요청 내용을 이용해서 뷰를 지정하게 된다.
			
				[예]
					@RequestMapping("/member/join.blp")
					public void joinForm(){}
					
					==> 스프링이 요청 내용 가지고 뷰를 선택하게 된다.
						/member/join.jsp 파일을 뷰 파일로 선택..
						
			2. 반환값 String으로 해서 뷰 지정하는 방법(jsp와 유사)
			
		
		[참고]
			위의 1, 2번 방법으로 뷰 선택 시 뷰에서 조립할 데이터는
				req.setAttribute()
				를 이용해서 조립하면 된다.
				
				
		  *	3. 반환값을 ModelAndView 클래스로 지정하는 방법
				
				ModelAndView 클래스는 모델과 뷰를 동시에 지정할 수 있는 클래스	
				
				[장점]
					만들어진 모델과 뷰를 한 개의 클래스로 등록해서 사용 가능
		
		[참고]
			요청 처리 함수의 매개변수 역할
				: 규칙이 없고 컨트롤러 작업에서 필요한 요소가 발생하면
				  매개변수에 등록만 해주면 대부분 스프링이 알아서 만들어준다. (모두 만들어주는 건 아님)
				  
				  파라미터로 전달되는 데이터를 매개변수에 키값을 변수이름으로 작성하면
				  해당 변수에 파라미터가 전달되어서 들어오게 된다.
		[참고]
			스프링은 파라미터를 VO 클래스 이용해서 받을 수 있다.
			
			[장점]
				파라미터가 많은 경우 일반적인 request 로 받으면
				코드가 길어지고 복잡해지는데
				이 문제 해결 가능
				
				VO 클래스 변수에 받은 파라미터 데이터를 한꺼번에 저장해준다. (키값과 VO 클래스 내의 변수 이름이 같아야 함)
				
			[방법]
				1. 파라미터를 받을 수 있는 VO 클래스 제작
					이 때 VO 클래스 안에는 
						getXXX() : EL에서 사용
						setXXX() : 스프링에서 파라미터를 받을 때 사용
					가 반드시 추가되어야 한다.
					
						get() : view에 vo 전달해서 데이터 꺼낼 때 호출
						set() : vo의 변수 이름에 파라미터의 키값 가지고 데이터 셋팅할 때 호출
				
				2. 요청 처리 함수의 매개변수에 필요한 VO 클래스 기술
					그러면 스프링이 알아서 파라미터 처리해줌
			
-------------------------------------

		[참고]
			ModelAndView의 주요함수
			
				1. addObject("키값", 데이터);
					==> req.setAttribute와 같은 기능
					
				2. setViewName("뷰")
					==> 포워딩할 뷰를 셋팅하는 함수
				
				3. setView(View)
					==> 리다이렉트 시 사용 
					
					[형식]
						RedirectView rv = new RedirectView();
						rv.setUrl("리다이렉트할 주소");
						
						mv.setView(rv); 	