# UML

	UML?
		Unified Modeling Language
		표준화된 범용 모델링 언어의 하나
		
		만들 프로그램을 도식적(다이어그램화)으로 표현하여 
		전체적인 흐름을 이해할 수 있도록 도와줌
		
	
	종류
		1. UseCase Diagram :  사용자 입장에서 필요한 기능 도식화
			
			[방법]
				1) 액터 : 사용자 도식화
						  프로그램 사용자 종류를 정확히 표현해야 한다
						  프로그램 권한, 프로그램 종류 분석 가능
				
				2) 유즈케이스 : 사용 가능 기능 도식화
								자세하게 표현
				
				3) 일반화 작업 : 순차적으로 처리
								
								[예]
									게시판 목록 보기 => 상세보기
				
				4) include 작업 : 특정 작업 실행 시 반드시 포함되어야 할 작업 표시	
								
								[예]
									회원가입 => 아이디 중복 검사
								
								[주의]
									화살표 방향은 메인 => 보조기능
				
				5) extends 작업 : 특정 작업이 진행되는 도중 다른 작업이 선택적으로 확장되어짐을 표시
								
								[주의]
									선택요소 => 메인요소
			
			[참고]
				UseCase는 도식적으로 사용자 가능 기능에 대해 나열한 것
				프로그램의 구체적 목적은 알 수 없음
				
				[예]
					로그인 기능 언제 어떻게?
					id, 비번 어떤 정규화 과정?
					
					이를 보완하려 UseCase 명세서 준비, UseCase 다이어그램과 같이 쓴다.
					
			[작성법]
				프로그램은 무관
				다음 내용은 반드시 포함
				
				1. UseCase 제목
				2. 개요 : 전체 기능
				3. 관련 액터 : 해당 UseCase 사용하는 사용자 종류
				4. 기본 흐름 : 기본적인 작업 흐름
				5. 대체 흐름 : 기본 흐름에 문제 발생 시 보조적으로 처리할 작업의 흐름 명시 (정상 작업 위함)
				6. 예외 흐름 : 위와 동일, (정상 작업 안 될 때)
				7. 확장점 : 해당 기능 수행하지 못할 경우 대비해서 대신 처리할 기능 나열해주는것 의미
				
					
					 
		2. Class Diagram
		
		3. Sequence Diagram : 프로그램 처리의 개요나 흐름 설계 시 사용
		
			[구성요소]
			*	1) 라이프라인 : 객체나 클래스 표시
			
							[작성 방법]
								객체이름:클래스이름
										
			*	2) 실행 사양 : 라이프라인에서 처리가 실행되고 있는 것을 의미
				3) 정지 : 라이프라인 소멸
			*	4) 동기 메세지 : 객체에 대한 처리 명령(메세지의 기동 명령)
								 메세지 처리가 끝날 때까지 다음 메세지를 기동하지 않는 사용 작성 시 사용
				5) 비동기 메세지 : 위와 동일, 
								   메세지 처리 끝까지 대기하지 않고 다음 메세지 기동
								   병렬 처리 등에 사용
								   메세지명 뒤에는 괄호를 붙여 인수(파라미터)를 기재 
			*	6) 응답 메세지 : 실행한 처리의 응답 메세지 의미	
		
		4. Collaboration Diagram
		
		5. Statechart Diagram
		
		6. Activity Diagram
		
		7. Deployment Diagram
		
		8. Component Diagram	

---------------------------------------------------

	회원가입 기능 UseCase 다이어그램, 명세서
	